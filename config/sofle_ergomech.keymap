/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

/ {
    // Activate ADJUST layer by pressing raise and lower

    conditional_layers { compatible = "zmk,conditional-layers"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "default";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp GRAVE   &kp N1            &kp N2    &kp N3    &kp N4  &kp N5     &kp N6     &kp N7     &kp N8        &kp N9          &kp N0             &kp PRINTSCREEN
&kp ESC     &kp Q             &kp W     &kp E     &kp R   &kp T      &kp Y      &kp U      &kp I         &kp O           &kp P              &kp BSPC
&kp TAB     &kp A             &kp S     &kp D     &kp F   &kp G      &kp H      &kp J      &kp K         &kp L           &kp SEMI           &kp SQT
&kp LSHFT   &kp Z             &kp X     &kp C     &kp V   &kp B      &kp N      &kp M      &kp COMMA     &kp DOT         &kp FSLH           &kp RSHFT
&kp C_MUTE  &kp LEFT_CONTROL  &kp LALT  &kp LGUI  &mo 1   &kp SPACE  &kp ENTER  &mo 2      &kp RGUI      &kp RALT        &kp RIGHT_CONTROL
                                                                     &kp ENTER  &kp RIGHT  &kp UP_ARROW  &kp LEFT_ARROW  &kp DOWN
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_DN C_VOL_UP>,
                <&inc_dec_kp PG_UP PG_UP>;
        };

        lower_layer {
            label = "lower";

            // TODO: Some binds are waiting for shifted keycode support.
            // ------------------------------------------------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&kp F1  &kp F2     &kp F3     &kp F4    &kp F5    &kp F6     &kp F7        &kp F8        &kp F9        &kp F10       &kp F11        &kp F12
&trans  &kp N1     &kp N2     &kp N3    &kp N4    &kp N5     &kp N6        &kp N7        &kp N8        &kp N9        &kp N0         &trans
&trans  &kp EXCL   &kp AT     &kp HASH  &kp DLLR  &kp PRCNT  &kp CARET     &kp AMPS      &kp ASTRK     &kp LPAR      &kp RPAR       &trans
&trans  &kp EQUAL  &kp MINUS  &kp PLUS  &kp LBRC  &kp RBRC   &kp LBKT      &kp RBKT      &kp SEMI      &kp COLON     &kp BACKSLASH  &trans
&trans  &trans     &trans     &trans    &mo 3     &trans     &trans        &mo 3         &trans        &trans        &trans
                                                             &bt BT_SEL 0  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 4  &bt BT_SEL 3
            >;

            sensor-bindings =
                <&inc_dec_kp LC(LEFT_ARROW) LC(RIGHT)>,
                <&inc_dec_kp PG_UP PG_DN>;
        };

        raise_layer {
            label = "raise";

            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
            // |       | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
            // |       | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
            // |       | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
            //                |      |       |       |      |      |  |      |      |      |       |      |

            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans         &kp LOCKING_NUM  &kp KP_DIVIDE    &kp KP_MULTIPLY  &kp KP_SUBTRACT  &trans
&trans      &kp INS       &kp PSCRN     &kp K_CMENU   &trans        &trans        &kp PAGE_UP    &kp KP_NUMBER_7  &kp KP_N8        &kp KP_NUMBER_9  &kp KP_PLUS      &kp BACKSPACE
&kp CAPS    &kp LALT      &kp LCTRL     &kp LSHFT     &trans        &trans        &kp PAGE_DOWN  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_ENTER     &kp DEL
&trans      &kp LC(Z)     &kp LC(X)     &kp LC(C)     &kp LC(V)     &trans        &trans         &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_ENTER     &trans
&trans      &trans        &trans        &trans        &mo 3         &trans        &trans         &mo 3            &kp KP_NUMBER_0  &kp KP_NUMBER_0  &kp KP_DOT
                                                                                  &kp ENTER      &kp RIGHT        &kp UP_ARROW     &kp LEFT_ARROW   &kp DOWN
            >;

            sensor-bindings =
                <&inc_dec_kp LC(LEFT_ARROW) LC(RIGHT)>,
                <&inc_dec_kp PG_UP PG_DN>;
        };

        adjust_layer {
            // ----------------------------------------------------------------------------------------------------------------------------
            // | BTCLR  |  BT1    |  BT2    |   BT3   |   BT4   |   BT5   |                  |      |      |       |      |       |       |
            // | EXTPWR | RGB_HUD | RGB_HUI | RGB_SAD | RGB_SAI | RGB_EFF |                  |      |      |       |      |       |       |
            // |        | RGB_BRD | RGB_BRI |         |         |         |                  |      |      |       |      |       |       |
            // |        |         |         |         |         |         | RGB_TOG | |      |      |      |       |      |       |       |
            //                    |         |         |         |         |         | |      |      |      |       |      |

            label = "adjust";
            bindings = <
&bt BT_CLR         &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4     &none             &none       &none                 &kp RC(RA(END))  &kp RC(RA(DEL))       &tog 3
&ext_power EP_TOG  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_EFF  &none             &none       &none                 &none            &none                 &none
&none              &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &kp LG(D)        &none            &none            &none             &none       &none                 &none            &none                 &none
&none              &kp LG(Z)        &kp LG(X)        &kp LG(C)        &kp LG(P)        &none            &none             &none       &none                 &none            &none                 &kp RC(RS(END))
&rgb_ug RGB_TOG    &none            &none            &none            &none            &none            &none             &none       &none                 &none            &none
                                                                                                        &kp K_PLAY_PAUSE  &kp K_NEXT  &kp C_BRIGHTNESS_INC  &kp K_PREV       &kp C_BRIGHTNESS_DEC
            >;
        };
    };
};
